name: Cross-Platform Build

on:
  push:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PyQt6
        
    - name: Convert PNG to ICO
      run: |
        pip install pillow
        python -c "from PIL import Image; img = Image.open('resource/icon.png'); img.save('icon.ico', format='ICO', sizes=[(256, 256), (128, 128), (64, 64), (48, 48), (32, 32), (16, 16)])"

    - name: Build with PyInstaller
      run: |
        pyinstaller --noconfirm --windowed --name webpark64 `
          --icon icon.ico `
          --add-data "src;src" `
          --distpath download/zip/w `
          --workpath build/win `
          src/main.py

    - name: Create Windows ZIP
      run: |
        cd download/zip
        Compress-Archive -Path w -DestinationPath ../webpark-w.zip

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: webpark-windows
        path: download/webpark-w.zip

  build-macos:
    runs-on: macos-latest
    timeout-minutes: 40

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install pyinstaller PyQt6
        brew install libpng

    - name: Convert PNG to ICNS
      run: |
        mkdir icon.iconset
        sizes=(16 32 64 128 256 512)
        for size in "${sizes[@]}"; do
          sips -z $size $size resource/icon.png --out icon.iconset/icon_${size}x${size}.png
          sips -z $((size*2)) $((size*2)) resource/icon.png --out icon.iconset/icon_${size}x${size}@2x.png
        done
        iconutil -c icns icon.iconset -o icon.icns
        rm -R icon.iconset

    - name: Build macOS app
      run: |
        pyinstaller --noconfirm --windowed --name WebPark \
          --icon icon.icns \
          --osx-bundle-identifier "com.example.webpark" \
          --add-data "src:src" \
          --distpath download/zip/mac \
          --workpath build/mac \
          src/main.py
        
        # 修复macOS应用结构
        mv download/zip/mac/WebPark.app/Contents/MacOS/webpark64 download/zip/mac/WebPark.app/Contents/MacOS/WebPark
        sed -i '' 's/webpark64/WebPark/' download/zip/mac/WebPark.app/Contents/Info.plist

    - name: Create macOS ZIP
      run: |
        cd download/zip
        ditto -c -k --sequesterRsrc --keepParent mac ../webpark-mac.zip

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: webpark-macos
        path: download/webpark-mac.zip

  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-xinerama0 libgl1-mesa-glx
        pip install pyinstaller PyQt6

    - name: Build Linux executable
      run: |
        pyinstaller --noconfirm --windowed --name webpark64 \
          --add-data "src:src" \
          --distpath download/zip/l/bin \
          --workpath build/linux \
          src/main.py

    - name: Create Linux ZIP
      run: |
        cd download/zip
        zip -r ../webpark-l.zip l

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: webpark-linux
        path: download/webpark-l.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/webpark-windows
          artifacts/webpark-macos
          artifacts/webpark-linux
        tag_name: v${{ github.run_id }}
        name: WebPark ${{ github.run_id }}
        body: |
          Auto-generated build for:
          - Windows: webpark-w.zip
          - macOS: webpark-mac.zip
          - Linux: webpark-l.zip
