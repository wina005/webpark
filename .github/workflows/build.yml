name: WebPark Cross-Platform Build

on:
  push:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:  # 添加手动触发按钮

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 25
    env:
      OUTPUT_DIR: download/zip
      EXE_NAME: webpark64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install pyinstaller PyQt6 pillow
        
    - name: Convert PNG to ICO
      run: |
        python -c "from PIL import Image; img = Image.open('src/assets/icon.png'); img.save('icon.ico', format='ICO')"

    - name: Build Windows executable
      run: |
        pyinstaller --noconfirm --windowed --name ${{ env.EXE_NAME }} `
          --icon icon.ico `
          --distpath ${{ env.OUTPUT_DIR }}/w/bin `
          --workpath build/win `
          src/main.py

    - name: Create Windows ZIP
      run: |
        cd ${{ env.OUTPUT_DIR }}
        Compress-Archive -Path w -DestinationPath ../webpark-w.zip

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: webpark-windows
        path: download/webpark-w.zip

  build-macos:
    runs-on: macos-latest
    timeout-minutes: 35
    env:
      OUTPUT_DIR: download/zip
      APP_NAME: WebPark

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install pyinstaller PyQt6
        brew install imagemagick

    - name: Convert PNG to ICNS
      run: |
        mkdir icon.iconset
        # 生成所有必需尺寸
        sizes=(16 32 128 256 512)
        for size in "${sizes[@]}"; do
          sips -z $size $size src/assets/icon.png --out icon.iconset/icon_${size}x${size}.png
          sips -z $((size*2)) $((size*2)) src/assets/icon.png --out icon.iconset/icon_${size}x${size}@2x.png
        done
        iconutil -c icns icon.iconset -o icon.icns

    - name: Build macOS app
      run: |
        pyinstaller --noconfirm --windowed --name ${{ env.APP_NAME }} \
          --icon icon.icns \
          --osx-bundle-identifier "com.example.webpark" \
          --distpath ${{ env.OUTPUT_DIR }}/mac \
          src/main.py
        
        # 修复应用结构和可执行文件名
        mv ${{ env.OUTPUT_DIR }}/mac/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }} \
           ${{ env.OUTPUT_DIR }}/mac/${{ env.APP_NAME }}.app/Contents/MacOS/webpark64
        sed -i '' "s/>${{ env.APP_NAME }}<\/string>/>webpark64<\/string>/" \
          ${{ env.OUTPUT_DIR }}/mac/${{ env.APP_NAME }}.app/Contents/Info.plist

    - name: Create macOS ZIP
      run: |
        cd ${{ env.OUTPUT_DIR }}
        ditto -c -k --sequesterRsrc --keepParent mac ../webpark-m.zip

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: webpark-macos
        path: download/webpark-m.zip

  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      OUTPUT_DIR: download/zip
      EXE_NAME: webpark64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-xinerama0 libgl1-mesa-glx
        pip install pyinstaller PyQt6

    - name: Build Linux executable
      run: |
        pyinstaller --noconfirm --windowed --name ${{ env.EXE_NAME }} \
          --distpath ${{ env.OUTPUT_DIR }}/l/bin \
          src/main.py

    - name: Create Linux ZIP
      run: |
        cd ${{ env.OUTPUT_DIR }}
        zip -r ../webpark-l.zip l

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: webpark-linux
        path: download/webpark-l.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'  # 仅在发布时创建Release
      with:
        files: |
          artifacts/webpark-windows
          artifacts/webpark-macos
          artifacts/webpark-linux
        tag_name: v${{ github.run_id }}
        name: WebPark Build ${{ github.run_id }}
        body: |
          Automated cross-platform build for WebPark
          - Windows: webpark-w.zip
          - macOS: webpark-m.zip
          - Linux: webpark-l.zip
